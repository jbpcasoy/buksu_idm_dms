datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  IM            IM[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum IMStatus {
  SUBMITTED
  DEPARTMENT_REVIEWED
  DEPARTMENT_ENDORSED
  CITL_REVIEWED
  CITL_ENDORSED
}

model IM {
  id           String   @id @default(cuid())
  serialNumber String
  title        String
  status       IMStatus @default(SUBMITTED)
  owner        User     @relation(fields: [ownerId], references: [id])
  ownerId      String
  fileName     String
  createdAt    DateTime
  updatedAt    DateTime
}
