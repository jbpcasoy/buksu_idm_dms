datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Faculty       Faculty[]
  ActiveFaculty ActiveFaculty?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum IMStatus {
  SUBMITTED
  DEPARTMENT_REVIEWED
  DEPARTMENT_ENDORSED
  CITL_REVIEWED
  CITL_ENDORSED
}

model IM {
  id           String   @id @default(cuid())
  serialNumber String
  title        String
  status       IMStatus @default(SUBMITTED)
  owner        Faculty  @relation(fields: [ownerId], references: [id])
  ownerId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  File         File[]
}

model File {
  id               String   @id @default(cuid())
  fileName         String
  originalFileName String
  iM               IM       @relation(fields: [iMId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  iMId             String
  googleDocsUrl    String?
}

model College {
  id         String       @id @default(cuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Department Department[]
}

model Department {
  id        String    @id @default(cuid())
  name      String    @unique
  college   College   @relation(fields: [collegeId], references: [id])
  collegeId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Faculty   Faculty[]
}

model Faculty {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  departmentId  String
  department    Department     @relation(fields: [departmentId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ActiveFaculty ActiveFaculty?
  IM            IM[]
  Chairperson   Chairperson?
  Coordinator   Coordinator?
  Senior        Senior?

  @@unique([userId, departmentId])
}

model ActiveFaculty {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Faculty   Faculty  @relation(fields: [facultyId], references: [id])
  facultyId String   @unique
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Chairperson {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Faculty           Faculty            @relation(fields: [facultyId], references: [id])
  facultyId         String             @unique
  ActiveChairperson ActiveChairperson?
}

model Coordinator {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Faculty           Faculty            @relation(fields: [facultyId], references: [id])
  facultyId         String             @unique
  ActiveCoordinator ActiveCoordinator?
}

model Senior {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Faculty      Faculty       @relation(fields: [facultyId], references: [id])
  facultyId    String        @unique
  ActiveSenior ActiveSenior?
}

model ActiveCoordinator {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])
  coordinatorId String      @unique
}

model ActiveSenior {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Senior    Senior   @relation(fields: [seniorId], references: [id])
  seniorId  String   @unique
}

model ActiveChairperson {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Chairperson   Chairperson @relation(fields: [chairpersonId], references: [id])
  chairpersonId String      @unique
}
