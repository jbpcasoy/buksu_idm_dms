datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  Faculty          Faculty[]
  ActiveFaculty    ActiveFaculty?
  ReadNotification ReadNotification[]
  Admin            Admin?
  LoginRole        LoginRole?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// dont use with sqlite
enum IMStatus {
  SUBMITTED
  DEPARTMENT_REVIEWED
  DEPARTMENT_ENDORSED
  CITL_REVIEWED
  CITL_ENDORSED
}

enum IMType {
  MODULE
  COURSE_FILE
  WORKTEXT
  TEXTBOOK
}

model IM {
  id                             String                          @id @default(cuid())
  serialNumber                   String?                         @unique
  title                          String
  // dont use with sqlite
  status                         IMStatus                        @default(SUBMITTED)
  // use with sqlite
  // status             String              @default("SUBMITTED")
  owner                          Faculty                         @relation(fields: [ownerId], references: [id])
  ownerId                        String
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @default(now())
  File                           File[]
  DepartmentApproval             DepartmentApproval?
  ActiveFile                     ActiveFile?
  authors                        String?                         @db.Text
  PeerReview                     PeerReview[]
  type                           IMType                          @default(MODULE)
  SubmittedPeerReview            SubmittedPeerReview?
  ChairpersonReview              ChairpersonReview[]
  SubmittedChairpersonReview     SubmittedChairpersonReview?
  CoordinatorReview              CoordinatorReview[]
  SubmittedCoordinatorReview     SubmittedCoordinatorReview?
  SubmittedPeerSuggestion        SubmittedPeerSuggestion?
  SubmittedCoordinatorSuggestion SubmittedCoordinatorSuggestion?
  SubmittedChairpersonSuggestion SubmittedChairpersonSuggestion?
  CoordinatorEndorsement         CoordinatorEndorsement?

  @@index([ownerId])
}

model File {
  id               String      @id @default(cuid())
  fileName         String      @unique
  originalFileName String
  iM               IM          @relation(fields: [iMId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
  iMId             String
  googleDocsUrl    String?
  ActiveFile       ActiveFile?

  @@index([iMId])
}

model ActiveFile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
  File      File     @relation(fields: [fileId], references: [id])
  fileId    String   @unique
  IM        IM       @relation(fields: [iMId], references: [id])
  iMId      String   @unique
}

model College {
  id         String       @id @default(cuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Department Department[]
  Dean       Dean?
}

model Department {
  id                String             @id @default(cuid())
  name              String             @unique
  college           College            @relation(fields: [collegeId], references: [id])
  collegeId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Faculty           Faculty[]
  ActiveCoordinator ActiveCoordinator?
  ActiveChairperson ActiveChairperson?
  ActiveFaculty     ActiveFaculty[]

  @@index([collegeId])
}

model Faculty {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  departmentId  String
  department    Department     @relation(fields: [departmentId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ActiveFaculty ActiveFaculty?
  IM            IM[]
  Chairperson   Chairperson?
  Coordinator   Coordinator?
  PeerApproval  PeerApproval[]
  PeerReview    PeerReview[]
  Dean          Dean?

  @@unique([userId, departmentId])
  @@index([departmentId])
}

model ActiveFaculty {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Faculty           Faculty            @relation(fields: [facultyId], references: [id])
  facultyId         String             @unique
  User              User               @relation(fields: [userId], references: [id])
  userId            String             @unique
  Department        Department         @relation(fields: [departmentId], references: [id])
  departmentId      String
  ActiveCoordinator ActiveCoordinator?
  ActiveChairperson ActiveChairperson?
  ActiveDean        ActiveDean?

  @@index([departmentId])
}

model Chairperson {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Faculty             Faculty               @relation(fields: [facultyId], references: [id])
  facultyId           String                @unique
  ActiveChairperson   ActiveChairperson?
  ChairpersonApproval ChairpersonApproval[]
  ChairpersonReview   ChairpersonReview[]
}

model Coordinator {
  id                     String                   @id @default(cuid())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Faculty                Faculty                  @relation(fields: [facultyId], references: [id])
  facultyId              String                   @unique
  ActiveCoordinator      ActiveCoordinator?
  CoordinatorApproval    CoordinatorApproval[]
  CoordinatorReview      CoordinatorReview[]
  CoordinatorEndorsement CoordinatorEndorsement[]
}

// model Senior {
//   id             String           @id @default(cuid())
//   createdAt      DateTime         @default(now())
//   updatedAt      DateTime         @updatedAt
//   Faculty        Faculty          @relation(fields: [facultyId], references: [id])
//   facultyId      String           @unique
//   ActiveSenior   ActiveSenior?
//   SeniorApproval SeniorApproval[]
// }

model ActiveCoordinator {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Coordinator     Coordinator   @relation(fields: [coordinatorId], references: [id])
  coordinatorId   String        @unique
  ActiveFaculty   ActiveFaculty @relation(fields: [activeFacultyId], references: [id])
  activeFacultyId String        @unique
  Department      Department    @relation(fields: [departmentId], references: [id])
  departmentId    String        @unique
}

// model ActiveSenior {
//   id              String        @id @default(cuid())
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
//   Senior          Senior        @relation(fields: [seniorId], references: [id])
//   seniorId        String        @unique
//   ActiveFaculty   ActiveFaculty @relation(fields: [activeFacultyId], references: [id])
//   activeFacultyId String        @unique
//   Department      Department    @relation(fields: [departmentId], references: [id])
//   departmentId    String

//   @@index([departmentId])
// }

model ActiveChairperson {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Chairperson     Chairperson   @relation(fields: [chairpersonId], references: [id])
  chairpersonId   String        @unique
  ActiveFaculty   ActiveFaculty @relation(fields: [activeFacultyId], references: [id])
  activeFacultyId String        @unique
  Department      Department    @relation(fields: [departmentId], references: [id])
  departmentId    String        @unique
}

model DepartmentApproval {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  iM                  IM                   @relation(fields: [iMId], references: [id])
  iMId                String               @unique
  CoordinatorApproval CoordinatorApproval?
  ChairpersonApproval ChairpersonApproval?
  PeerApproval        PeerApproval?
}

model PeerApproval {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  DepartmentApproval   DepartmentApproval @relation(fields: [departmentApprovalId], references: [id])
  departmentApprovalId String             @unique
  Faculty              Faculty            @relation(fields: [facultyId], references: [id])
  facultyId            String

  @@index([facultyId])
}

model CoordinatorApproval {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  DepartmentApproval   DepartmentApproval @relation(fields: [departmentApprovalId], references: [id])
  departmentApprovalId String             @unique
  Coordinator          Coordinator        @relation(fields: [coordinatorId], references: [id])
  coordinatorId        String

  @@index([coordinatorId])
}

model ChairpersonApproval {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  DepartmentApproval   DepartmentApproval @relation(fields: [departmentApprovalId], references: [id])
  departmentApprovalId String             @unique
  Chairperson          Chairperson        @relation(fields: [chairpersonId], references: [id])
  chairpersonId        String

  @@index([chairpersonId])
}

// model SeniorApproval {
//   id                   String             @id @default(cuid())
//   cretaedAt            DateTime           @default(now())
//   updatedAt            DateTime           @updatedAt
//   DepartmentApproval   DepartmentApproval @relation(fields: [departmentApprovalId], references: [id])
//   Senior               Senior             @relation(fields: [seniorId], references: [id])
//   seniorId             String
//   departmentApprovalId String             @unique

//   @@index([seniorId])
// }

model Attachment {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  fileName         String   @unique
  originalFileName String
}

// Ideal IM review schema, postponed 
model IMReviewSection {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  title            String             @unique
  IMReviewQuestion IMReviewQuestion[]

  @@unique([id, title])
}

model IMReviewQuestion {
  id                   String          @id @default(cuid())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  question             String          @unique
  IMReviewSection      IMReviewSection @relation(fields: [iMReviewSectionId, iMReviewSectionTitle], references: [id, title], onUpdate: Restrict)
  iMReviewSectionId    String
  iMReviewSectionTitle String

  @@index([iMReviewSectionId, iMReviewSectionTitle])
}

model PeerReview {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Faculty             Faculty              @relation(fields: [facultyId], references: [id])
  facultyId           String
  IM                  IM                   @relation(fields: [iMId], references: [id])
  iMId                String
  PeerReviewItem      PeerReviewItem[]
  SubmittedPeerReview SubmittedPeerReview?

  @@unique([facultyId, iMId])
  @@index([iMId])
  @@index([facultyId])
}

model PeerReviewItem {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  questionId   String // static uuid from frontend, for prototype, production should have question table with google forms like features
  answer       String
  PeerReview   PeerReview @relation(fields: [peerReviewId], references: [id])
  peerReviewId String

  @@unique([peerReviewId, questionId])
  @@index([peerReviewId])
}

model SubmittedPeerReview {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  IM             IM              @relation(fields: [iMId], references: [id])
  iMId           String          @unique
  PeerReview     PeerReview      @relation(fields: [peerReviewId], references: [id])
  peerReviewId   String          @unique
  PeerSuggestion PeerSuggestion?
  Notification   Notification?
}

model ChairpersonReview {
  id                         String                      @id @default(cuid())
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  Chairperson                Chairperson                 @relation(fields: [chairpersonId], references: [id])
  chairpersonId              String
  IM                         IM                          @relation(fields: [iMId], references: [id])
  iMId                       String
  ChairpersonReviewItem      ChairpersonReviewItem[]
  SubmittedChairpersonReview SubmittedChairpersonReview?

  @@unique([chairpersonId, iMId])
  @@index([iMId])
  @@index([chairpersonId])
}

model ChairpersonReviewItem {
  id                  String            @id @default(cuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  questionId          String // static uuid from frontend, for prototype, production should have question table with google forms like features
  answer              String
  ChairpersonReview   ChairpersonReview @relation(fields: [chairpersonReviewId], references: [id])
  chairpersonReviewId String

  @@unique([chairpersonReviewId, questionId])
  @@index([chairpersonReviewId])
}

model SubmittedChairpersonReview {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  IM                    IM                     @relation(fields: [iMId], references: [id])
  iMId                  String                 @unique
  ChairpersonReview     ChairpersonReview      @relation(fields: [chairpersonReviewId], references: [id])
  chairpersonReviewId   String                 @unique
  ChairpersonSuggestion ChairpersonSuggestion?
  Notification          Notification?
}

model CoordinatorReview {
  id                         String                      @id @default(cuid())
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  Coordinator                Coordinator                 @relation(fields: [coordinatorId], references: [id])
  coordinatorId              String
  IM                         IM                          @relation(fields: [iMId], references: [id])
  iMId                       String
  CoordinatorReviewItem      CoordinatorReviewItem[]
  SubmittedCoordinatorReview SubmittedCoordinatorReview?

  @@unique([coordinatorId, iMId])
  @@index([coordinatorId])
  @@index([iMId])
}

model CoordinatorReviewItem {
  id                  String            @id @default(cuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  questionId          String // static uuid from frontend, for prototype, production should have question table with google forms like features
  answer              String
  CoordinatorReview   CoordinatorReview @relation(fields: [coordinatorReviewId], references: [id])
  coordinatorReviewId String

  @@unique([coordinatorReviewId, questionId])
  @@index([coordinatorReviewId])
}

model SubmittedCoordinatorReview {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  IM                    IM                     @relation(fields: [iMId], references: [id])
  iMId                  String                 @unique
  CoordinatorReview     CoordinatorReview      @relation(fields: [coordinatorReviewId], references: [id])
  coordinatorReviewId   String                 @unique
  CoordinatorSuggestion CoordinatorSuggestion?
  Notification          Notification?
}

model PeerSuggestion {
  id                      String                   @id @default(cuid())
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  SubmittedPeerReview     SubmittedPeerReview      @relation(fields: [submittedPeerReviewId], references: [id])
  submittedPeerReviewId   String                   @unique
  PeerSuggestionItem      PeerSuggestionItem[]
  SubmittedPeerSuggestion SubmittedPeerSuggestion?
}

model PeerSuggestionItem {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  PeerSuggestion   PeerSuggestion @relation(fields: [peerSuggestionId], references: [id])
  peerSuggestionId String
  value            String         @db.Text
  actionTaken      String?        @db.Text
  pageNumber       Int
  remarks          String?        @db.Text

  @@index([peerSuggestionId])
}

model ChairpersonSuggestion {
  id                             String                          @id @default(cuid())
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @updatedAt
  SubmittedChairpersonReview     SubmittedChairpersonReview      @relation(fields: [submittedChairpersonReviewId], references: [id])
  submittedChairpersonReviewId   String                          @unique
  ChairpersonSuggestionItem      ChairpersonSuggestionItem[]
  SubmittedChairpersonSuggestion SubmittedChairpersonSuggestion?
}

model ChairpersonSuggestionItem {
  id                      String                @id @default(cuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  ChairpersonSuggestion   ChairpersonSuggestion @relation(fields: [chairpersonSuggestionId], references: [id])
  chairpersonSuggestionId String
  value                   String                @db.Text
  actionTaken             String?               @db.Text
  pageNumber              Int
  remarks                 String?               @db.Text

  @@index([chairpersonSuggestionId])
}

model CoordinatorSuggestion {
  id                             String                          @id @default(cuid())
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @updatedAt
  SubmittedCoordinatorReview     SubmittedCoordinatorReview      @relation(fields: [submittedCoordinatorReviewId], references: [id])
  submittedCoordinatorReviewId   String                          @unique
  CoordinatorSuggestionItem      CoordinatorSuggestionItem[]
  SubmittedCoordinatorSuggestion SubmittedCoordinatorSuggestion?
}

model CoordinatorSuggestionItem {
  id                      String                @id @default(cuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  value                   String                @db.Text
  actionTaken             String?               @db.Text
  pageNumber              Int
  remarks                 String?               @db.Text
  CoordinatorSuggestion   CoordinatorSuggestion @relation(fields: [coordinatorSuggestionId], references: [id])
  coordinatorSuggestionId String

  @@index([coordinatorSuggestionId])
}

enum Type {
  SUBMITTED_PEER_REVIEW
  SUBMITTED_CHAIRPERSON_REVIEW
  SUBMITTED_COORDINATOR_REVIEW
  SUBMITTED_PEER_SUGGESTION
  SUBMITTED_CHAIRPERSON_SUGGESTION
  SUBMITTED_COORDINATOR_SUGGESTION
}

model Notification {
  id                               String                          @id @default(cuid())
  createdAt                        DateTime                        @default(now())
  updatedAt                        DateTime                        @updatedAt
  ReadNotification                 ReadNotification[]
  Type                             Type
  SubmittedPeerReview              SubmittedPeerReview?            @relation(fields: [submittedPeerReviewId], references: [id])
  submittedPeerReviewId            String?                         @unique
  SubmittedChairpersonReview       SubmittedChairpersonReview?     @relation(fields: [submittedChairpersonReviewId], references: [id])
  submittedChairpersonReviewId     String?                         @unique
  SubmittedCoordinatorReview       SubmittedCoordinatorReview?     @relation(fields: [submittedCoordinatorReviewId], references: [id])
  submittedCoordinatorReviewId     String?                         @unique
  SubmittedPeerSuggestion          SubmittedPeerSuggestion?        @relation(fields: [submittedPeerSuggestionId], references: [id])
  submittedPeerSuggestionId        String?                         @unique
  SubmittedChairpersonSuggestion   SubmittedChairpersonSuggestion? @relation(fields: [submittedChairpersonSuggestionId], references: [id])
  submittedChairpersonSuggestionId String?                         @unique
  SubmittedCoordinatorSuggestion   SubmittedCoordinatorSuggestion? @relation(fields: [submittedCoordinatorSuggestionId], references: [id])
  submittedCoordinatorSuggestionId String?                         @unique
}

model ReadNotification {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  User           User         @relation(fields: [userId], references: [id])
  userId         String

  @@unique([userId, notificationId])
  @@index([notificationId])
  @@index([userId])
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

enum Role {
  ADMIN
  FACULTY
  UNAUTHORIZED
}

model LoginRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  Role      Role

  @@index([userId])
}

model SubmittedPeerSuggestion {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  PeerSuggestion   PeerSuggestion @relation(fields: [peerSuggestionId], references: [id])
  peerSuggestionId String         @unique
  IM               IM             @relation(fields: [iMId], references: [id])
  iMId             String         @unique
  Notification     Notification?
}

model SubmittedCoordinatorSuggestion {
  id                      String                @id @default(cuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  CoordinatorSuggestion   CoordinatorSuggestion @relation(fields: [coordinatorSuggestionId], references: [id])
  coordinatorSuggestionId String                @unique
  IM                      IM                    @relation(fields: [iMId], references: [id])
  iMId                    String                @unique
  Notification            Notification?
}

model SubmittedChairpersonSuggestion {
  id                      String                @id @default(cuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  ChairpersonSuggestion   ChairpersonSuggestion @relation(fields: [chairpersonSuggestionId], references: [id])
  chairpersonSuggestionId String                @unique
  IM                      IM                    @relation(fields: [iMId], references: [id])
  iMId                    String                @unique
  Notification            Notification?
}

model CoordinatorEndorsement {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  IM            IM          @relation(fields: [iMId], references: [id])
  iMId          String      @unique
  Coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])
  coordinatorId String

  @@index([coordinatorId])
}

model Dean {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Faculty    Faculty     @relation(fields: [facultyId], references: [id])
  facultyId  String      @unique
  College    College     @relation(fields: [collegeId], references: [id])
  collegeId  String      @unique
  ActiveDean ActiveDean?
}

model ActiveDean {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Dean            Dean          @relation(fields: [deanId], references: [id])
  deanId          String        @unique
  ActiveFaculty   ActiveFaculty @relation(fields: [activeFacultyId], references: [id])
  activeFacultyId String        @unique
}
